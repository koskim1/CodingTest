#include <bits/stdc++.h>
using namespace std;

// https://www.acmicpc.net/problem/12851

/*
* 숨바꼭질 2
*
수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 
있다. 수빈이는 걷거나 순간이동을 할 수 있다. 

만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 
순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때,
1. 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초후인지.
2. 가장빠른 방법으로 찾는법이 몇가지 인지.
출력해라.   
*/

const int MAX = 100000;
int visited[MAX + 4];
long long cnt[MAX + 4];

void fastIO() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}


int main() {
    fastIO();

    int n, m;
    cin >> n >> m;
    if (n == m) {
        puts("0"); puts("1");
        return 0;
    }
    visited[n] = 1;
    cnt[n] = 1;
    queue<int> q;
    q.push(n);
    while (!q.empty()) {
        int now = q.front();
        q.pop();
        for (int next : {now - 1, now + 1, now * 2}) {
            if (0 <= next && next <= MAX) {
                if (!visited[next]) {
                    q.push(next);
                    visited[next] = visited[now] + 1;
                    cnt[next] += cnt[now];
                }
                // 2초만에 a를 갔다했을 때 이미 a는 visited가 돼있기때문에
                // b에서 a로 가는데 2초만에 a에 가게 되는경우
                // 이미 visited[next]는 2이고
                // visited[now]+1이 이 2값과 같기때문에
                // 같은 시간이지만 다른 경우의 수기 때문에 cnt++;
                else if (visited[next] == visited[now] + 1) {
                    cnt[next] += cnt[now];
                }
            }
        }
    }
    cout << visited[m] - 1 << '\n';
    cout << cnt[m] << '\n';

}	
